"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectMutationProcessor = void 0;

var _TransferrableMutation = require("../../transfer/TransferrableMutation");

var _deserializeTransferrableObject = require("../deserializeTransferrableObject");

/**
 * Copyright 2019 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ObjectMutationProcessor = (strings, nodeContext, workerContext, objectContext, config) => {
  const allowedExecution = config.executorsAllowed.includes(_TransferrableMutation.TransferrableMutationType.OBJECT_MUTATION);
  return {
    execute(mutations, startPosition, allowedMutation) {
      const functionName = strings.get(mutations[startPosition + _TransferrableMutation.ObjectMutationIndex.FunctionName]);
      const argCount = mutations[startPosition + _TransferrableMutation.ObjectMutationIndex.ArgumentCount];
      const {
        offset: targetOffset,
        args: deserializedTarget
      } = (0, _deserializeTransferrableObject.deserializeTransferrableObject)(mutations, startPosition + _TransferrableMutation.ObjectMutationIndex.SerializedTarget, 1, strings, nodeContext, objectContext);
      const target = deserializedTarget[0];
      const {
        offset: argsOffset,
        args
      } = (0, _deserializeTransferrableObject.deserializeTransferrableObject)(mutations, targetOffset, argCount, strings, nodeContext, objectContext);

      if (allowedExecution && allowedMutation) {
        if (isSetter(target, functionName)) {
          target[functionName] = args[0];
        } else {
          target[functionName](...args);
        }
      }

      return argsOffset;
    },

    print(mutations, startPosition) {
      const functionName = strings.get(mutations[startPosition + _TransferrableMutation.ObjectMutationIndex.FunctionName]);
      const {
        args: deserializedTarget
      } = (0, _deserializeTransferrableObject.deserializeTransferrableObject)(mutations, startPosition + _TransferrableMutation.ObjectMutationIndex.SerializedTarget, 1, strings, nodeContext, objectContext);
      const target = deserializedTarget[0];
      return {
        type: 'OBJECT_MUTATION',
        target,
        functionName,
        isSetter: isSetter(target, functionName),
        allowedExecution
      };
    }

  };
};

exports.ObjectMutationProcessor = ObjectMutationProcessor;

function isSetter(object, name) {
  if (!object) {
    throw new Error(`Property ${name} does not exist on ${object}.`);
  }

  const descriptor = Object.getOwnPropertyDescriptor(object, name);

  if (descriptor !== undefined) {
    return 'set' in descriptor;
  }

  return isSetter(Object.getPrototypeOf(object), name);
}