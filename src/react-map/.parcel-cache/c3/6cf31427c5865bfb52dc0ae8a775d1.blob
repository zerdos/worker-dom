"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportedWorker = void 0;

var _function = require("./commands/function");

var _Messages = require("../transfer/Messages");

var _TransferrableKeys = require("../transfer/TransferrableKeys");

var _TransferrableMutation = require("../transfer/TransferrableMutation");

/**
 * Copyright 2020 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An ExportedWorker is returned by the upgradeElement API.
 * For the most part, it delegates to the underlying Worker.
 *
 * It notably removes `postMessage` support and add `callFunction`.
 */
class ExportedWorker {
  constructor(workerContext, config) {
    this.workerContext_ = workerContext;
    this.config = config;
  }
  /**
   * Calls a function in the worker and returns a promise with the result.
   * @param functionIdentifer
   * @param functionArguments
   */


  callFunction(functionIdentifer, ...functionArguments) {
    if (!this.config.executorsAllowed.includes(_TransferrableMutation.TransferrableMutationType.FUNCTION_CALL)) {
      throw new Error(`[worker-dom]: Error calling ${functionIdentifer}. You must enable the FUNCTION_CALL executor within the config.`);
    }

    const {
      promise,
      index
    } = (0, _function.registerPromise)();
    const msg = {
      [_TransferrableKeys.TransferrableKeys.type]: _Messages.MessageType.FUNCTION,
      [_TransferrableKeys.TransferrableKeys.functionIdentifier]: functionIdentifer,
      [_TransferrableKeys.TransferrableKeys.functionArguments]: JSON.stringify(functionArguments),
      [_TransferrableKeys.TransferrableKeys.index]: index
    };
    this.workerContext_.messageToWorker(msg);
    return promise;
  }

  set onerror(handler) {
    this.workerContext_.worker.onerror = handler;
  }

  terminate() {
    this.workerContext_.worker.terminate();
  }

}

exports.ExportedWorker = ExportedWorker;