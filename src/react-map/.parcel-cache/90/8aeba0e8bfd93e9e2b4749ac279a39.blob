"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropertyProcessor = void 0;

var _TransferrableMutation = require("../../transfer/TransferrableMutation");

var _utils = require("../../utils");

/**
 * Copyright 2019 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PropertyProcessor = (strings, nodeContext, workerContext, objectContext, config) => {
  const allowedExecution = config.executorsAllowed.includes(_TransferrableMutation.TransferrableMutationType.PROPERTIES);

  const getValue = (mutations, startPosition) => {
    const value = mutations[startPosition + _TransferrableMutation.PropertyMutationIndex.Value];

    if (mutations[startPosition + _TransferrableMutation.PropertyMutationIndex.IsBoolean] === _utils.NumericBoolean.TRUE) {
      return value === _utils.NumericBoolean.TRUE;
    }

    if (value !== 0) {
      return strings.get(value);
    }

    return null;
  };

  return {
    execute(mutations, startPosition, allowedMutation) {
      if (allowedExecution && allowedMutation) {
        const targetIndex = mutations[startPosition + _TransferrableMutation.PropertyMutationIndex.Target];
        const target = nodeContext.getNode(targetIndex);
        const name = strings.get(mutations[startPosition + _TransferrableMutation.PropertyMutationIndex.Name]);
        const value = getValue(mutations, startPosition);

        if (target) {
          if (name && value != null) {
            if (config.sanitizer) {
              const mutated = config.sanitizer.setProperty(target, name, String(value));

              if (!mutated) {// TODO(choumx): Inform worker that sanitizer ignored unsafe property value change.
              }
            } else {
              target[name] = value;
            }
          }
        } else {
          console.error(`PROPERTY: getNode(${targetIndex}) is null.`);
        }
      }

      return startPosition + _TransferrableMutation.PropertyMutationIndex.End;
    },

    print(mutations, startPosition) {
      const targetIndex = mutations[startPosition + _TransferrableMutation.PropertyMutationIndex.Target];
      const target = nodeContext.getNode(targetIndex);
      const name = strings.get(mutations[startPosition + _TransferrableMutation.PropertyMutationIndex.Name]);
      const value = getValue(mutations, startPosition);
      return {
        target,
        name,
        value,
        allowedExecution
      };
    }

  };
};

exports.PropertyProcessor = PropertyProcessor;