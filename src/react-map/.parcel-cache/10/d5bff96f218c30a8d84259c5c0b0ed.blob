"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LongTaskExecutor = void 0;

var _TransferrableMutation = require("../../transfer/TransferrableMutation");

/**
 * Copyright 2019 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const LongTaskExecutor = (stringContext, nodeContext, workerContext, objectContext, config) => {
  const allowedExecution = config.executorsAllowed.includes(_TransferrableMutation.TransferrableMutationType.LONG_TASK_START);
  let index = 0;
  let currentResolver;
  return {
    execute(mutations, startPosition, allowedMutation) {
      if (allowedExecution && allowedMutation && config.longTask) {
        if (mutations[startPosition] === _TransferrableMutation.TransferrableMutationType.LONG_TASK_START) {
          index++;

          if (!currentResolver) {
            config.longTask(new Promise(resolve => currentResolver = resolve));
          }
        } else if (mutations[startPosition] === _TransferrableMutation.TransferrableMutationType.LONG_TASK_END) {
          index--;

          if (currentResolver && index <= 0) {
            currentResolver();
            currentResolver = null;
            index = 0;
          }
        }
      }

      return startPosition + _TransferrableMutation.LongTaskMutationIndex.End;
    },

    print(mutations, startPosition) {
      return {
        type: _TransferrableMutation.ReadableMutationType[mutations[startPosition]],
        allowedExecution
      };
    },

    get active() {
      return currentResolver !== null;
    }

  };
};

exports.LongTaskExecutor = LongTaskExecutor;