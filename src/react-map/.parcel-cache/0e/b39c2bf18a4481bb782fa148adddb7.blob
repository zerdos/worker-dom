"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventSubscriptionProcessor = exports.sendValueChangeOnAttributeMutation = exports.applyDefaultInputListener = void 0;

var _Messages = require("../../transfer/Messages");

var _TransferrableKeys = require("../../transfer/TransferrableKeys");

var _TransferrableEvent = require("../../transfer/TransferrableEvent");

var _TransferrableMutation = require("../../transfer/TransferrableMutation");

var _nodes = require("../nodes");

/**
 * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Monitoring Nodes attribute changes requires a Mutation Observer.
 * We store the nodes being monitored to avoid creating more than one Observer
 * per Element.
 */
const monitoredNodes = new Map();
/**
 * Instead of a whitelist of elements that need their value tracked, use the existence
 * of a property called value to drive the decision.
 * @param node node to check if values should be tracked.
 * @return boolean if the node should have its value property tracked.
 */

const shouldTrackChanges = node => node && 'value' in node;
/**
 * When a node that has a value needing synced doesn't already have an event listener
 * listening for input values, ensure the value is synced with a default listener.
 * @param worker whom to dispatch value toward.
 * @param node node to listen to value changes on.
 */


const applyDefaultInputListener = (workerContext, node) => {
  if (shouldTrackChanges(node) && node.oninput === null) {
    node.oninput = () => fireValueChange(workerContext, node);
  }
};
/**
 * Use a MutationObserver to capture value changes based on Attribute modification (frequently used by frameworks).
 * @param worker whom to dispatch value toward.
 * @param node node to listen to value changes on.
 */


exports.applyDefaultInputListener = applyDefaultInputListener;

const sendValueChangeOnAttributeMutation = (workerContext, node) => {
  if (shouldTrackChanges(node) && !monitoredNodes.get(node)) {
    new MutationObserver(mutations => mutations.map(mutation => fireValueChange(workerContext, mutation.target))).observe(node, {
      attributes: true
    });
    monitoredNodes.set(node, true);
  }
};
/**
 * Tell WorkerDOM what the value is for a Node.
 * @param worker whom to dispatch value toward.
 * @param node where to get the value from.
 */


exports.sendValueChangeOnAttributeMutation = sendValueChangeOnAttributeMutation;

const fireValueChange = (workerContext, node) => workerContext.messageToWorker({
  [_TransferrableKeys.TransferrableKeys.type]: _Messages.MessageType.SYNC,
  [_TransferrableKeys.TransferrableKeys.sync]: {
    [_TransferrableKeys.TransferrableKeys.index]: node._index_,
    [_TransferrableKeys.TransferrableKeys.value]: node.value
  }
});
/**
 * Tell WorkerDOM what the window dimensions are.
 * @param workerContext
 * @param cachedWindowSize
 */


const fireResizeChange = (workerContext, cachedWindowSize) => workerContext.messageToWorker({
  [_TransferrableKeys.TransferrableKeys.type]: _Messages.MessageType.RESIZE,
  [_TransferrableKeys.TransferrableKeys.sync]: cachedWindowSize
});
/**
 * Convert a TouchList into a TransferrableTouchList
 * @param touchList
 */


const createTransferrableTouchList = touchList => Object.values(touchList).map(touch => [touch.identifier, touch.screenX, touch.screenY, touch.clientX, touch.clientY, touch.pageX, touch.pageY, touch.target._index_]);

const EventSubscriptionProcessor = (strings, nodeContext, workerContext, objectContext, config) => {
  const knownListeners = [];
  const allowedExecution = config.executorsAllowed.includes(_TransferrableMutation.TransferrableMutationType.EVENT_SUBSCRIPTION);
  let cachedWindowSize = [window.innerWidth, window.innerHeight];
  /**
   * Register an event handler for dispatching events to worker thread
   * @param worker whom to dispatch events toward
   * @param index node index the event comes from (used to dispatchEvent in worker thread).
   * @return eventHandler function consuming event and dispatching to worker thread
   */

  const eventHandler = (index, preventDefault) => event => {
    if (preventDefault) {
      event.preventDefault();
    }

    if (shouldTrackChanges(event.currentTarget)) {
      fireValueChange(workerContext, event.currentTarget);
    } else if (event.type === 'resize') {
      const {
        innerWidth,
        innerHeight
      } = window;

      if (cachedWindowSize[0] === innerWidth && cachedWindowSize[1] === innerHeight) {
        return;
      }

      cachedWindowSize = [window.innerWidth, window.innerHeight];
      fireResizeChange(workerContext, cachedWindowSize);
    }

    workerContext.messageToWorker({
      [_TransferrableKeys.TransferrableKeys.type]: _Messages.MessageType.EVENT,
      [_TransferrableKeys.TransferrableKeys.event]: {
        [_TransferrableKeys.TransferrableKeys.index]: index,
        [_TransferrableKeys.TransferrableKeys.bubbles]: event.bubbles,
        [_TransferrableKeys.TransferrableKeys.cancelable]: event.cancelable,
        [_TransferrableKeys.TransferrableKeys.cancelBubble]: event.cancelBubble,
        [_TransferrableKeys.TransferrableKeys.currentTarget]: [event.currentTarget._index_ || 0],
        [_TransferrableKeys.TransferrableKeys.defaultPrevented]: event.defaultPrevented,
        [_TransferrableKeys.TransferrableKeys.eventPhase]: event.eventPhase,
        [_TransferrableKeys.TransferrableKeys.isTrusted]: event.isTrusted,
        [_TransferrableKeys.TransferrableKeys.returnValue]: event.returnValue,
        [_TransferrableKeys.TransferrableKeys.target]: [event.target._index_ || 0],
        [_TransferrableKeys.TransferrableKeys.timeStamp]: event.timeStamp,
        [_TransferrableKeys.TransferrableKeys.type]: event.type,
        [_TransferrableKeys.TransferrableKeys.keyCode]: 'keyCode' in event ? event.keyCode : undefined,
        [_TransferrableKeys.TransferrableKeys.pageX]: 'pageX' in event ? event.pageX : undefined,
        [_TransferrableKeys.TransferrableKeys.pageY]: 'pageY' in event ? event.pageY : undefined,
        [_TransferrableKeys.TransferrableKeys.offsetX]: 'offsetX' in event ? event.offsetX : undefined,
        [_TransferrableKeys.TransferrableKeys.offsetY]: 'offsetY' in event ? event.offsetY : undefined,
        [_TransferrableKeys.TransferrableKeys.touches]: 'touches' in event ? createTransferrableTouchList(event.touches) : undefined,
        [_TransferrableKeys.TransferrableKeys.changedTouches]: 'changedTouches' in event ? createTransferrableTouchList(event.changedTouches) : undefined
      }
    });
  };
  /**
   * If the worker requests to add an event listener to 'change' for something the foreground thread is already listening to,
   * ensure that only a single 'change' event is attached to prevent sending values multiple times.
   * @param target node to change listeners on
   * @param addEvent is this an 'addEvent' or 'removeEvent' change
   * @param mutations Uint16Array for this set of changes
   * @param iterator current location in array to perform this change on
   */


  const processListenerChange = (target, addEvent, mutations, iterator) => {
    const type = strings.get(mutations[iterator]);
    const eventIndex = mutations[iterator + _TransferrableEvent.AddEventRegistrationIndex.Index];

    if (target === nodeContext.baseElement) {
      if (addEvent) {
        const preventDefault = Boolean(mutations[iterator + _TransferrableEvent.AddEventRegistrationIndex.WorkerDOMPreventDefault]);
        addEventListener(type, knownListeners[eventIndex] = eventHandler(_nodes.BASE_ELEMENT_INDEX, preventDefault));
      } else {
        removeEventListener(type, knownListeners[eventIndex]);
      }

      return;
    }

    let inputEventSubscribed = target.oninput !== null;
    const isChangeEvent = type === 'change';

    if (addEvent) {
      if (isChangeEvent) {
        inputEventSubscribed = true;
        target.onchange = null;
      }

      const preventDefault = Boolean(mutations[iterator + _TransferrableEvent.AddEventRegistrationIndex.WorkerDOMPreventDefault]);
      target.addEventListener(type, knownListeners[eventIndex] = eventHandler(target._index_, preventDefault));
    } else {
      if (isChangeEvent) {
        inputEventSubscribed = false;
      }

      target.removeEventListener(type, knownListeners[eventIndex]);
    }

    if (shouldTrackChanges(target)) {
      if (!inputEventSubscribed) applyDefaultInputListener(workerContext, target);
      sendValueChangeOnAttributeMutation(workerContext, target);
    }
  };

  return {
    execute(mutations, startPosition, allowedMutation) {
      const addEventListenerCount = mutations[startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.AddEventListenerCount];
      const removeEventListenerCount = mutations[startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.RemoveEventListenerCount];
      const addEventListenersPosition = startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Events + removeEventListenerCount * _TransferrableEvent.REMOVE_EVENT_SUBSCRIPTION_LENGTH;
      const endPosition = startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Events + addEventListenerCount * _TransferrableEvent.ADD_EVENT_SUBSCRIPTION_LENGTH + removeEventListenerCount * _TransferrableEvent.REMOVE_EVENT_SUBSCRIPTION_LENGTH;

      if (allowedExecution && allowedMutation) {
        const targetIndex = mutations[startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Target];
        const target = nodeContext.getNode(targetIndex);

        if (target) {
          let iterator = startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Events;

          while (iterator < endPosition) {
            const isRemoveEvent = iterator <= addEventListenersPosition;
            processListenerChange(target, isRemoveEvent, mutations, iterator);
            iterator += isRemoveEvent ? _TransferrableEvent.REMOVE_EVENT_SUBSCRIPTION_LENGTH : _TransferrableEvent.ADD_EVENT_SUBSCRIPTION_LENGTH;
          }
        } else {
          console.error(`getNode(${targetIndex}) is null.`);
        }
      }

      return endPosition;
    },

    print(mutations, startPosition) {
      const addEventListenerCount = mutations[startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.AddEventListenerCount];
      const removeEventListenerCount = mutations[startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.RemoveEventListenerCount];
      const addEventListenersPosition = startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Events + removeEventListenerCount * _TransferrableEvent.REMOVE_EVENT_SUBSCRIPTION_LENGTH;
      const endPosition = startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Events + addEventListenerCount * _TransferrableEvent.ADD_EVENT_SUBSCRIPTION_LENGTH + removeEventListenerCount * _TransferrableEvent.REMOVE_EVENT_SUBSCRIPTION_LENGTH;
      const targetIndex = mutations[startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Target];
      const target = nodeContext.getNode(targetIndex);
      const removedEventListeners = [];
      const addedEventListeners = [];
      let iterator = startPosition + _TransferrableEvent.EventSubscriptionMutationIndex.Events;

      while (iterator < endPosition) {
        const isRemoveEvent = iterator <= addEventListenersPosition;
        const eventList = isRemoveEvent ? addedEventListeners : removedEventListeners;
        eventList.push({
          type: strings.get(mutations[iterator]),
          index: mutations[iterator + 1]
        });
        iterator += isRemoveEvent ? _TransferrableEvent.REMOVE_EVENT_SUBSCRIPTION_LENGTH : _TransferrableEvent.ADD_EVENT_SUBSCRIPTION_LENGTH;
      }

      return {
        target,
        allowedExecution,
        removedEventListeners,
        addedEventListeners
      };
    }

  };
};

exports.EventSubscriptionProcessor = EventSubscriptionProcessor;