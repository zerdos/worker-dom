"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageBitmapProcessor = void 0;

var _TransferrableMutation = require("../../transfer/TransferrableMutation");

var _TransferrableKeys = require("../../transfer/TransferrableKeys");

var _Messages = require("../../transfer/Messages");

/**
 * Copyright 2019 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ImageBitmapProcessor = (strings, nodeContext, workerContext, objectContext, config) => {
  const allowedExecution = config.executorsAllowed.includes(_TransferrableMutation.TransferrableMutationType.IMAGE_BITMAP_INSTANCE);
  return {
    execute(mutations, startPosition, allowedMutation) {
      if (allowedExecution && allowedMutation) {
        const targetIndex = mutations[startPosition + _TransferrableMutation.ImageBitmapMutationIndex.Target];
        const target = nodeContext.getNode(targetIndex);

        if (target) {
          self.createImageBitmap(target).then(imageBitmap => {
            workerContext.messageToWorker({
              [_TransferrableKeys.TransferrableKeys.type]: _Messages.MessageType.IMAGE_BITMAP_INSTANCE,
              [_TransferrableKeys.TransferrableKeys.callIndex]: mutations[startPosition + _TransferrableMutation.ImageBitmapMutationIndex.CallIndex],
              [_TransferrableKeys.TransferrableKeys.data]: imageBitmap
            }, [imageBitmap]);
          });
        } else {
          console.error(`IMAGE_BITMAP_INSTANCE: getNode(${targetIndex}) is null.`);
        }
      }

      return startPosition + _TransferrableMutation.ImageBitmapMutationIndex.End;
    },

    print(mutations, startPosition) {
      const targetIndex = mutations[startPosition + _TransferrableMutation.ImageBitmapMutationIndex.Target];
      const target = nodeContext.getNode(targetIndex);
      return {
        type: 'IMAGE_BITMAP_INSTANCE',
        target,
        allowedExecution,
        callIndex: mutations[startPosition + _TransferrableMutation.ImageBitmapMutationIndex.CallIndex]
      };
    }

  };
};

exports.ImageBitmapProcessor = ImageBitmapProcessor;