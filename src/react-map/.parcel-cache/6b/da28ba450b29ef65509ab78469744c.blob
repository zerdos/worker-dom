"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchAndInstall = fetchAndInstall;
exports.install = install;

var _Messages = require("../transfer/Messages");

var _mutator = require("./mutator");

var _nodes = require("./nodes");

var _strings = require("./strings");

var _TransferrableKeys = require("../transfer/TransferrableKeys");

var _configuration = require("./configuration");

var _worker = require("./worker");

var _objectContext = require("./object-context");

var _exportedWorker = require("./exported-worker");

/**
 * Copyright 2018 The AMP HTML Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ALLOWABLE_MESSAGE_TYPES = [_Messages.MessageType.MUTATE, _Messages.MessageType.HYDRATE];
/**
 * @param baseElement
 * @param authorScriptURL
 * @param workerDOMURL
 * @param callbacks
 * @param sanitizer
 * @param debug
 */

function fetchAndInstall(baseElement, config) {
  const fetchPromise = Promise.all([// TODO(KB): Fetch Polyfill for IE11.
  fetch(config.domURL).then(response => response.text()), fetch(config.authorURL).then(response => response.text())]);
  return install(fetchPromise, baseElement, config);
}
/**
 * @param fetchPromise
 * @param baseElement
 * @param config
 */


function install(fetchPromise, baseElement, config) {
  const stringContext = new _strings.StringContext();
  const objectContext = new _objectContext.ObjectContext();
  const nodeContext = new _nodes.NodeContext(stringContext, baseElement);
  const normalizedConfig = (0, _configuration.normalizeConfiguration)(config);
  return fetchPromise.then(([domScriptContent, authorScriptContent]) => {
    if (domScriptContent && authorScriptContent && config.authorURL) {
      const workerContext = new _worker.WorkerContext(baseElement, nodeContext, domScriptContent, authorScriptContent, normalizedConfig);
      const mutatorContext = new _mutator.MutatorProcessor(stringContext, nodeContext, workerContext, normalizedConfig, objectContext);

      workerContext.worker.onmessage = message => {
        const {
          data
        } = message;

        if (!ALLOWABLE_MESSAGE_TYPES.includes(data[_TransferrableKeys.TransferrableKeys.type])) {
          return;
        }

        mutatorContext.mutate(data[_TransferrableKeys.TransferrableKeys.phase], data[_TransferrableKeys.TransferrableKeys.nodes], data[_TransferrableKeys.TransferrableKeys.strings], new Uint16Array(data[_TransferrableKeys.TransferrableKeys.mutations]));
      };

      return new _exportedWorker.ExportedWorker(workerContext, normalizedConfig);
    }

    return null;
  });
}